name: Build and Deploy Jekyll with Cache Clearing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Manual trigger option
  workflow_dispatch:
    inputs:
      clear_cache:
        description: 'Clear all caches before build'
        required: false
        default: 'true'
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Clear GitHub Actions Cache (Manual trigger)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.clear_cache == 'true'
      run: |
        echo "Manually clearing caches..."
        # This step doesn't actually clear cache but signals intent
        
    - name: Clear GitHub Actions Cache (Push to main)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Auto-clearing caches on main branch push..."
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        cache-version: ${{ github.run_number }}  # Force cache invalidation on each run
        
    - name: Clear Jekyll Cache
      run: |
        bundle exec jekyll clean || true
        rm -rf _site
        rm -rf .jekyll-cache
        rm -rf .sass-cache
        echo "Jekyll cache cleared"
        
    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v4
      
    - name: Build with Jekyll
      run: |
        # Add timestamp to force cache invalidation
        echo "build_time: \"$(date -Iseconds)\"" > _data/build_info.yml
        echo "commit_sha: \"${{ github.sha }}\"" >> _data/build_info.yml
        echo "cache_cleared: false" >> _data/build_info.yml
        bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
      env:
        JEKYLL_ENV: production
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4